$date
	Sun Dec 08 17:34:00 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module divider_tb $end
$var wire 1 ! zeroDiv $end
$var wire 32 " out [31:0] $end
$var wire 1 # exception $end
$var reg 32 $ DD [31:0] $end
$var reg 32 % DS [31:0] $end
$var reg 1 & control $end
$var reg 1 ' reset $end
$scope module uut $end
$var wire 32 ( DD [31:0] $end
$var wire 32 ) DS [31:0] $end
$var wire 1 & control $end
$var wire 1 ' reset $end
$var reg 1 # exception $end
$var reg 8 * exp_DD [7:0] $end
$var reg 8 + exp_DS [7:0] $end
$var reg 8 , exp_out [7:0] $end
$var reg 24 - mant_DD [23:0] $end
$var reg 24 . mant_DS [23:0] $end
$var reg 32 / out [31:0] $end
$var reg 24 0 quotient [23:0] $end
$var reg 1 1 sign $end
$var reg 1 ! zeroDiv $end
$scope function NRDivisor $end
$var reg 24 2 D1 [23:0] $end
$var reg 24 3 D2 [23:0] $end
$var reg 24 4 temp_quotient [23:0] $end
$var reg 24 5 temp_remainder [23:0] $end
$var integer 32 6 i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 6
bx 5
bx 4
bx 3
bx 2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
b0 )
b0 (
0'
0&
b0 %
b0 $
x#
bx "
x!
$end
#50
0!
0#
b0 "
b0 /
1'
#100
1#
b0 0
b11111111111111111111111111111111 6
b100100000000000000000000 5
b0 4
b100100000000000000000000 2
b110000000000000000000000 3
b0 ,
b110000000000000000000000 .
b100100000000000000000000 -
b1111111 +
b10000001 *
01
b111111110000000000000000000000 %
b111111110000000000000000000000 )
b1000000100100000000000000000000 $
b1000000100100000000000000000000 (
0'
1&
#200
0&
#300
b11111111111111111111111111111111 6
b100100000000000000000000 5
b0 ,
1&
#350
b1000000010000000000000000000000 %
b1000000010000000000000000000000 )
b1000000110000000000000000000000 $
b1000000110000000000000000000000 (
#400
0&
#500
0#
b110100100000000000000000000000 "
b110100100000000000000000000000 /
b100000000000000000000000 0
b1 4
b11111111111111111111111111111111 6
b0 5
b110000000000000000000000 2
b1101001 ,
b110000000000000000000000 -
b10000000 +
1&
#600
b0 %
b0 )
b1000000010000000000000000000000 $
b1000000010000000000000000000000 (
0&
#700
1!
b1111111100000000000000000000000 "
b1111111100000000000000000000000 /
b100000000000000000000000 .
b0 +
b10000000 *
1&
#800
0&
#850
b1000000010000000000000000000000 %
b1000000010000000000000000000000 )
b0 $
b0 (
#900
1#
b0 "
b0 /
0!
b0 0
b100000000000000000000000 5
b11111111111111111111111111111111 6
b0 4
b100000000000000000000000 2
b0 ,
b110000000000000000000000 .
b100000000000000000000000 -
b10000000 +
b0 *
1&
#1000
0&
#1100
b10000000000000000000000000000000 "
b10000000000000000000000000000000 /
b11111111111111111111111111111111 6
b100100000000000000000000 5
b100100000000000000000000 2
b0 ,
b100100000000000000000000 -
b1111111 +
b10000001 *
11
b111111110000000000000000000000 %
b111111110000000000000000000000 )
b11000000100100000000000000000000 $
b11000000100100000000000000000000 (
1&
#1200
0&
#1300
b11111111111111111111111111111111 6
b100100000000000000000000 5
b0 ,
1&
#1350
b0 %
b0 )
b11000000110000000000000000000000 $
b11000000110000000000000000000000 (
#1400
0&
#1500
1!
0#
b11111111100000000000000000000000 "
b11111111100000000000000000000000 /
b100000000000000000000000 .
b110000000000000000000000 -
b0 +
1&
#1600
b11000000010000000000000000000000 %
b11000000010000000000000000000000 )
b0 $
b0 (
0&
#1700
1#
b10000000000000000000000000000000 "
b10000000000000000000000000000000 /
0!
b11111111111111111111111111111111 6
b100000000000000000000000 5
b100000000000000000000000 2
b0 ,
b110000000000000000000000 .
b100000000000000000000000 -
b10000000 +
b0 *
1&
#1800
0&
#1900
b11111111111111111111111111111111 6
b100000000000000000000000 5
b0 ,
1&
